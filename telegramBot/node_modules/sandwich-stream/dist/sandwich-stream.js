(function(e, a) { for(var i in a) e[i] = a[i]; }(exports, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/sandwich-stream.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/sandwich-stream.ts":
/*!********************************!*\
  !*** ./src/sandwich-stream.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\n/**\n * Handles Readable streams requests as concatenation through data handling as\n * well adding tags it each begin, end and between of the streams\n */\nclass SandwichStream extends stream_1.Readable {\n    /**\n     * Initiates the SandwichStream, you can consider it also passing\n     * ReadableOptions to it\n     *\n     * @param head Pushes this content before all other content\n     * @param tail Pushes this content after all other data has been pushed\n     * @param separator Pushes this content between each stream\n     * @param remaining The other kind of options to be passed to Readable\n     * @example\n     * const ss = new SandwichStream({\n     *     head: 'This at the top\\n',\n     *     tail: '\\nThis at the bottom',\n     *     separator: '\\n --- \\n'\n     * });\n     */\n    constructor(_a) {\n        var { head, tail, separator } = _a, remaining = __rest(_a, [\"head\", \"tail\", \"separator\"]);\n        super(remaining);\n        this.streamsActive = false;\n        this.streams = [];\n        this.newStreams = [];\n        this.currentStream = null;\n        this.head = (null !== head && undefined !== head) ? head : null;\n        this.tail = (null !== tail && undefined !== tail) ? tail : null;\n        this.separator = (null !== separator && undefined !== separator) ? separator : null;\n    }\n    /**\n     * Add a new Readable stream in the queue\n     *\n     * @param newStream The Readable stream\n     * @example\n     * sandwichStream.add(streamOne);\n     * sandwichStream.add(streamTwo);\n     * sandwichStream.add(streamThree);\n     * @throws An Error in case that this request was not accepted\n     * @returns This instance of Sandwich Stream\n     */\n    add(newStream) {\n        if (false === this.streamsActive) {\n            this.streams.push(newStream);\n            newStream.on('error', this.subStreamOnError.bind(this));\n        }\n        else {\n            this.newStreams.push(newStream);\n        }\n        return this;\n    }\n    /**\n     * Works in a similar way from the Readable read, only that this one checks\n     * for whether or not a stream is already being handled\n     * @returns This instance of Sandwich Stream\n     */\n    _read() {\n        if (false === this.streamsActive) {\n            this.streamsActive = true;\n            this.pushHead();\n            this.streamNextStream();\n        }\n    }\n    /**\n     * Binds an error thrown from one of the streams being handled\n     *\n     * @param err Error to be bind\n     * @returns This instance of Sandwich Stream\n     */\n    subStreamOnError(err) {\n        this.emit('error', err);\n    }\n    /**\n     * Fetches the next stream to be handled\n     * @returns This instance of Sandwich Stream\n     */\n    streamNextStream() {\n        if (true === this.nextStream()) {\n            this.bindCurrentStreamEvents();\n        }\n        else {\n            this.pushTail();\n            this.push(null);\n        }\n    }\n    /**\n     * Verifies whether or not the stream queue has ended\n     * @returns This instance of Sandwich Stream\n     */\n    nextStream() {\n        const tmp = this.streams.shift();\n        this.currentStream = (undefined !== tmp) ? tmp : null;\n        return null !== this.currentStream;\n    }\n    /**\n     * Once the current stream starts to pass their data, this handles it in a\n     * less complicated way\n     * @returns This instance of Sandwich Stream\n     */\n    bindCurrentStreamEvents() {\n        this.currentStream.on('readable', this.currentStreamOnReadable.bind(this));\n        this.currentStream.on('end', this.currentStreamOnEnd.bind(this));\n    }\n    /**\n     * Handles the data from a current stream once they are being streamed\n     * @returns This instance of Sandwich Stream\n     */\n    currentStreamOnReadable() {\n        const tmp = this.currentStream.read();\n        const data = (undefined !== tmp && null !== tmp) ? tmp : '';\n        this.push(data);\n    }\n    /**\n     * Handles the tagging once a stream is finished\n     * @returns This instance of Sandwich Stream\n     */\n    currentStreamOnEnd() {\n        this.pushSeparator();\n        this.streams.concat(this.newStreams);\n        this.newStreams = [];\n        this.streamNextStream();\n    }\n    /**\n     * Adds the head tag to the Sandwich Stream\n     * @returns This instance of Sandwich Stream\n     */\n    pushHead() {\n        if (null !== this.head) {\n            this.push(this.head);\n        }\n    }\n    /**\n     * Adds the separator tag to the Sandwich Stream\n     * @returns This instance of Sandwich Stream\n     */\n    pushSeparator() {\n        if (0 < this.streams.length && null !== this.separator) {\n            this.push(this.separator);\n        }\n    }\n    /**\n     * Adds the tail tag to the Sandwich Stream\n     * @returns This instance of Sandwich Stream\n     */\n    pushTail() {\n        if (null !== this.tail) {\n            this.push(this.tail);\n        }\n    }\n}\nexports.SandwichStream = SandwichStream;\nexports.default = SandwichStream;\n\n\n//# sourceURL=webpack:///./src/sandwich-stream.ts?");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"stream\");\n\n//# sourceURL=webpack:///external_%22stream%22?");

/***/ })

/******/ })));